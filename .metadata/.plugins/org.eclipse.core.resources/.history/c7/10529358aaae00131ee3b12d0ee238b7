/**
 * 
 */
package jaxbxjctool;

import gov.nih.nlm.ncbi.snp.docsum.Assembly;
import gov.nih.nlm.ncbi.snp.docsum.Component;
import gov.nih.nlm.ncbi.snp.docsum.MapLoc;
import gov.nih.nlm.ncbi.snp.docsum.Rs;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.stream.StreamSource;

import auxiliary.FileOperations;

import common.Commons;

/**
 * @author burcakotlu
 *
 */
public class EntrezEUtilities {
	
	
	private Unmarshaller unmarshaller;
	private static gov.nih.nlm.ncbi.snp.docsum.ObjectFactory _fool_javac=null;
	private  XMLInputFactory xmlInputFactory=null;
	

	
	
	private EntrezEUtilities() throws Exception
    {
		this.xmlInputFactory = XMLInputFactory.newInstance();
		xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.TRUE);
    	
		xmlInputFactory.setXMLResolver(new javax.xml.stream.XMLResolver()
        {
            	@Override
            	public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace)
                {
            		return new java.io.ByteArrayInputStream(new byte[0]);
                }
        });

		JAXBContext jaxbCtxt=JAXBContext.newInstance("gov.nih.nlm.ncbi.snp.docsum");
		this.unmarshaller=jaxbCtxt.createUnmarshaller();

    }
	
	
	private void run(String rsId,BufferedWriter bufferedWriter, Map<String,String> chrName2RefSeqIdforGrch37Map) throws Exception
    {

		if(rsId.startsWith("rs")) 
			
			rsId=rsId.substring(2);
			
			String uri="http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id="+rsId+"&retmode=xml";			
        
			XMLEventReader reader= xmlInputFactory.createXMLEventReader(new StreamSource(uri)); 
			

			while(reader.hasNext())
            {
				XMLEvent evt=reader.peek();

				if(!evt.isStartElement())
                {
					reader.nextEvent();
					continue;
                }

				StartElement start=evt.asStartElement();
				String localName=start.getName().getLocalPart();

				if(!localName.equals("Rs"))
                {
					reader.nextEvent();
					continue;
                }

				Rs rs=unmarshaller.unmarshal(reader, Rs.class).getValue();
				
				
				for(Assembly as:rs.getAssembly())
                {  
									
                    for(Component comp:as.getComponent())
                    {
                    	       	
	                   for(MapLoc maploc: comp.getMapLoc())
	                   {
	                	   
	                	   int snpPosition = maploc.getPhysMapInt();
	                	   int snpPositionMinusTen = snpPosition-10;
	                	   int snpPositionPlusTen = snpPosition+10;
	                	   String chrName = comp.getChromosome();
	                	   String refSeqId = chrName2RefSeqIdforGrch37Map.get(chrName);
	                	   String groupLabel = as.getGroupLabel();
	                	   
	                	   if(groupLabel.startsWith("GRCh37")){
	                		   
	                		   bufferedWriter.write("rs"+rsId);
		                	   bufferedWriter.write("\t");
		                	   
		                	   bufferedWriter.write("chr" + comp.getChromosome());
		                	   bufferedWriter.write("\t");
		                	   
		                	   bufferedWriter.write(maploc.getPhysMapInt().toString());
		                       bufferedWriter.write("\t");


		                	   bufferedWriter.write(rs.getSequence().getObserved());
		                	   bufferedWriter.write("\t");
		                	   
			                	   
		                       String esearchString="http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&id="+ refSeqId + "&seq_start="+ snpPositionMinusTen + "&seq_stop=" + snpPositionPlusTen + "&rettype=fasta&retmode=text";
		                       URL url= new URL(esearchString);
		                       
		                       //System.out.println("EFETCH RESULT:");
		                       // Read from the URL
		                       try
		                       { 
			                    	 BufferedReader in= new BufferedReader(new InputStreamReader(url.openStream()));
			                         String inputLine;       // one line of the result, as it is read line by line
			                         String sourceHTML= "";  // will eventually contain the whole result
			                         // Continue to read lines while there are still some left to read
			                         
			                         while ((inputLine= in.readLine()) != null)  // read one line of the input stream
				                         { sourceHTML+= inputLine + "\t";            // add this line to end of the whole shebang
		//		                           ++lineCount;                              // count the number of lines read
				                         }
				                         
			                         
			                         // Close the connection
			                         in.close();
			                         // Display the entire page
			                         bufferedWriter.write (sourceHTML);
			                         bufferedWriter.write ("\t");
		    	                 
		                       }
		                       // Handle any error in opening the connection to the URL
		                       catch (Exception e)
		                       { System.out.println("Error reading from the URL:");
		                         System.out.println(e);
		                       }
		                       
		                       
		                       
		                	   bufferedWriter.write(as.getGenomeBuild());
		                	   bufferedWriter.write("\t");
		                	   bufferedWriter.write(as.getGroupLabel());
		                	   bufferedWriter.write("\n");
//		                	   bufferedWriter.write(comp.getAccession());
//		                	   bufferedWriter.write("\t");

		                     
	                	   }//End of IF
	                	   
	                	                   	   
	                	  

	                	  
	                	    
                           

 
	                                         
	                      
	                        
	                   }//End of for Maploc
                    }//End of for Component
                }//End of for Assembly
				
            }//End of while
			
        	reader.close();
    }


	public void readRsIDInputFileandWriteAugmentedOutputFile(String inputFileName, String outputFileName,Map<String,String> chrName2RefSeqIdforGrch37Map){
		
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;
		
		FileWriter fileWriter = null;
		BufferedWriter bufferedWriter = null;
		
		String rsId= null;
		
		try {
			
			fileReader = new FileReader(inputFileName);
			bufferedReader = new BufferedReader(fileReader);
			
			fileWriter = FileOperations.createFileWriter(outputFileName);
			bufferedWriter = new BufferedWriter(fileWriter);
			
			while((rsId = bufferedReader.readLine())!=null){
				this.run(rsId.substring(2),bufferedWriter,chrName2RefSeqIdforGrch37Map);
			}
			
			bufferedReader.close();
			bufferedWriter.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
     
	}

	//# Sequence-Name	Sequence-Role	Assigned-Molecule	Assigned-Molecule-Location/Type	GenBank-Accn	Relationship	RefSeq-Accn	Assembly-Unit
	//1	assembled-molecule	1	Chromosome	CM000663.1	=	NC_000001.10	Primary Assembly
	//X	assembled-molecule	X	Chromosome	CM000685.1	=	NC_000023.10	Primary Assembly
	public void fillMap(String refSeqIdsforGRCh37InputFile,Map<String,String> chrName2RefSeqIdforGrch37Map){
		
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;
		
		String strLine = null;
		int numberofChromosomesinHomoSapiens = 24;
		int count = 0;
		
		int indexofFirstTab;
		int indexofSecondTab;
		int indexofThirdTab;
		int indexofFourthTab;
		int indexofFifthTab;
		int indexofSixthTab;
		int indexofSeventhTab;
		
		String chrName;
		String refSeqId;
		
		try {
			fileReader = new FileReader(refSeqIdsforGRCh37InputFile);
			bufferedReader = new BufferedReader(fileReader);
			
			while((strLine = bufferedReader.readLine())!=null){
				if(strLine.startsWith("#")){
					continue;
				}else{
					if (count<numberofChromosomesinHomoSapiens){
						count++;
						
						indexofFirstTab 	= strLine.indexOf('\t');
						indexofSecondTab 	= strLine.indexOf('\t', indexofFirstTab+1);
						indexofThirdTab 	= strLine.indexOf('\t', indexofSecondTab+1);
						indexofFourthTab 	= strLine.indexOf('\t', indexofThirdTab+1);
						indexofFifthTab 	= strLine.indexOf('\t', indexofFourthTab+1);
						indexofSixthTab 	= strLine.indexOf('\t', indexofFifthTab+1);
						indexofSeventhTab 	= strLine.indexOf('\t', indexofSixthTab+1);
						
						chrName = strLine.substring(0, indexofFirstTab);
						refSeqId = strLine.substring(indexofSixthTab+1, indexofSeventhTab);
						
						chrName2RefSeqIdforGrch37Map.put(chrName, refSeqId);
						continue;
						
					}
				}
					
				break;
				
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public static void main(String[] args)
    {
			EntrezEUtilities app=null;
			Map<String,String> chrName2RefSeqIdforGrch37Map = new HashMap<String,String>();
			
			try {
				app = new EntrezEUtilities();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			//Construct map for refSeq Ids of homo sapiens chromosomes for GRCh37
			String refSeqIdsforGRCh37InputFile = Commons.REFSEQ_IDS_FOR_GRCH37_INPUT_FILE;
			app.fillMap(refSeqIdsforGRCh37InputFile,chrName2RefSeqIdforGrch37Map);
			
	        String inputFileName = Commons.OCD_GWAS_SIGNIFICANT_SNPS_RSIDS_INPUT_FILE_NAME_TEST;
	        String outputFileName = Commons.OCD_GWAS_SIGNIFICANT_SNPS_RSIDS_OUTPUT_FILE_NAME;
	        
	        app.readRsIDInputFileandWriteAugmentedOutputFile(inputFileName,outputFileName,chrName2RefSeqIdforGrch37Map);
	        
	       
	    
    }

}
