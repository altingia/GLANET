/**
 * @author burcakotlu
 * @date Apr 3, 2014 
 * @time 12:04:41 PM
 * 
 * This class with return the list of RsIds in a given interval.
 */
package jaxbxjctool;

import generated.ESearchResult;
import generated.Id;
import generated.IdList;

import java.io.BufferedWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.stream.StreamSource;

/**
 * 
 */
public class AugmentationofGivenIntervalwithRsIds {
	
	private Unmarshaller unmarshaller;
	private static generated.ObjectFactory _fool_javac=null;
	private  XMLInputFactory xmlInputFactory=null;
	
	
	private AugmentationofGivenIntervalwithRsIds() throws Exception
    {
		this.xmlInputFactory = XMLInputFactory.newInstance();
		xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.TRUE);
    	
		xmlInputFactory.setXMLResolver(new javax.xml.stream.XMLResolver()
        {
            	@Override
            	public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace)
                {
            		return new java.io.ByteArrayInputStream(new byte[0]);
                }
        });

		JAXBContext jaxbCtxt=JAXBContext.newInstance("generated");
		this.unmarshaller=jaxbCtxt.createUnmarshaller();

    }
	
	
	
	private void getRsIdsInAGivenInterval(String chrName, int start,int end) throws Exception
    {
		
		//esearch default retmode is xml or it can be set to json
	    String eSearchString="http://www.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=snp&term="+ start + ":" + end + "[Base Position] AND "+ chrName +"[CHR] AND txid9606&usehistory=n";
                      
           
       //burcak yeni start
       XMLEventReader readerSearch= xmlInputFactory.createXMLEventReader(new StreamSource(eSearchString)); 
	
		while(readerSearch.hasNext())
        {
			XMLEvent evtSearch=readerSearch.peek();

			if(!evtSearch.isStartElement())
               {
				readerSearch.nextEvent();
				continue;
               }

			StartElement startSearch=evtSearch.asStartElement();
			String localNameSearch=startSearch.getName().getLocalPart();

			if(!localNameSearch.equals("eSearchResult"))
               {
				readerSearch.nextEvent();
				continue;
               }

			ESearchResult eSearchResult=unmarshaller.unmarshal(readerSearch, ESearchResult.class).getValue();
			IdList idList = (IdList) eSearchResult.getCountOrRetMaxOrRetStartOrQueryKeyOrWebEnvOrIdListOrTranslationSetOrTranslationStackOrQueryTranslationOrERROR().get(5);
			
			for(Id id: idList.getId()){
				System.out.println(id.getvalue());
				
			}
			
			System.out.println("come here");
			
       }//End of while
         
		readerSearch.close();
    }
	

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
