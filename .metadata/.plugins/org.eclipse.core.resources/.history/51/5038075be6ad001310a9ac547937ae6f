/**
 * 
 */
package biostar;

import gov.nih.nlm.ncbi.snp.docsum.Assembly;
import gov.nih.nlm.ncbi.snp.docsum.Component;
import gov.nih.nlm.ncbi.snp.docsum.MapLoc;
import gov.nih.nlm.ncbi.snp.docsum.Rs;

import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.stream.StreamSource;

/**
 * @author burcakotlu
 *
 */
public class Biostar95284
{
	private Unmarshaller unmarshaller;
	private static gov.nih.nlm.ncbi.snp.docsum.ObjectFactory _fool_javac=null;
	private  XMLInputFactory xmlInputFactory=null;
	
	private Biostar95284() throws Exception
    {
		this.xmlInputFactory = XMLInputFactory.newInstance();
		xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);
		xmlInputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.TRUE);
    	
		xmlInputFactory.setXMLResolver(new javax.xml.stream.XMLResolver()
        {
            	@Override
            	public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace)
                {
            		return new java.io.ByteArrayInputStream(new byte[0]);
                }
        });

		JAXBContext jaxbCtxt=JAXBContext.newInstance("gov.nih.nlm.ncbi.snp.docsum");
		this.unmarshaller=jaxbCtxt.createUnmarshaller();

    }
	
	
	private void run(String rsId) throws Exception
    {

		if(rsId.startsWith("rs")) 
			
			rsId=rsId.substring(2);
			
			String uri="http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=snp&id="+rsId+"&retmode=xml";
        
			XMLEventReader reader= xmlInputFactory.createXMLEventReader(new StreamSource(uri)); 

			while(reader.hasNext())
            {
				XMLEvent evt=reader.peek();

				if(!evt.isStartElement())
                {
					reader.nextEvent();
					continue;
                }

				StartElement start=evt.asStartElement();
				String localName=start.getName().getLocalPart();

				if(!localName.equals("Rs"))
                {
					reader.nextEvent();
					continue;
                }

				Rs rs=unmarshaller.unmarshal(reader, Rs.class).getValue();
				
				List<Rs.AlleleOrigin> alleleOrigin = rs.getAlleleOrigin();
				if(alleleOrigin.isEmpty()){
					System.out.println("empty");
				}else{
					for(Rs.AlleleOrigin allele: alleleOrigin){
						System.out.println(allele.toString());
					}

				}

				for(Assembly as:rs.getAssembly())
                {  
					
					
                    for(Component comp:as.getComponent())
                    {
                    	
                    	
	                   for(MapLoc maploc: comp.getMapLoc())
	                   {
	                       System.out.print("rs"+rsId);
	                       System.out.print("\t");
	                       System.out.print(as.getGenomeBuild());
	                       System.out.print("\t");
	                       System.out.print(as.getGroupLabel());
	                       System.out.print("\t");
	                       
	                     //Observed Alleles
	   					System.out.println(rs.getSequence().getObserved());
	   					
	                       
	                       //debug
//	                       System.out.print(maploc.get);
//	                       System.out.print("\t");
	                       //debug
	                      
	                       System.out.print(comp.getChromosome());
	                       System.out.print("\t");
	                       System.out.print(maploc.getPhysMapInt());
	                       System.out.println();
	                       
	                   }//End of for Maploc
                    }//End of for Component
                }//End of for Assembly
				
            }//End of while
			
        	reader.close();
    }


	public static void main(String[] args)
    {
		try
	       {
	        Biostar95284 app=new Biostar95284();
	        for(String arg:args)
	            {
	            	app.run(arg);
	            }
	        }
	    catch (Exception e)
	        {
	        	e.printStackTrace();
	        }
    }
}
