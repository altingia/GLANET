/**
 * @author burcakotlu
 * @date Sep 26, 2014 
 * @time 5:06:55 PM
 */
package userdefined.geneset;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import augmentation.humangenes.HumanGenesAugmentation;
import auxiliary.FileOperations;
import ui.GlanetRunner;
import enumtypes.UserDefinedGeneSetInputType;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.TShortObjectMap;

/**
 * 
 */
public class UserDefinedGeneSetUtility {
	
	
	
	
	public static void updateMap(Integer geneID, TIntObjectMap<TShortArrayList> geneId2ListofUserDefinedGeneSetNumberMap,short userDefinedGeneSetNumber){
		
		//fill ncbiGeneId2KeggPathwayHashMap
		//Hash Map does not contain this ncbiGeneId
		if (!geneId2ListofUserDefinedGeneSetNumberMap.containsKey(geneID)){					
			TShortArrayList userDefinedGeneSetNumberList = new TShortArrayList();
			userDefinedGeneSetNumberList.add(userDefinedGeneSetNumber);
			geneId2ListofUserDefinedGeneSetNumberMap.put(geneID, userDefinedGeneSetNumberList);
			}
		//Hash Map contains this ncbiGeneId
		else{
			existingUserDefinedGeneSetNumberList = geneId2ListofUserDefinedGeneSetNumberMap.get(geneID);
			
			if(!(existingUserDefinedGeneSetNumberList.contains(userDefinedGeneSetNumber))){
				existingUserDefinedGeneSetNumberList.add(userDefinedGeneSetNumber);
			} else{
				GlanetRunner.appendLog("More than one same kegg pathway for the same ncbi gene id");
			}
			
			geneId2ListofUserDefinedGeneSetNumberMap.put(geneID, existingUserDefinedGeneSetNumberList);
		}
	}
	
	
	public static void createNcbiGeneId2ListofUserDefinedGeneSetNumberMap(
			String dataFolder,
			String userDefinedGeneSetInputFile, 
			UserDefinedGeneSetInputType userDefinedGeneSetInputType,
			TObjectShortMap<String> userDefinedGeneSetName2UserDefinedGeneSetNumberMap,
			TShortObjectMap<String> userDefinedGeneSetNumber2UserDefinedGeneSetNameMap,
			TIntObjectMap<TShortArrayList> geneId2ListofUserDefinedGeneSetNumberMap){
		
		
		//In case of need: First fill these conversion maps
		Map<String,List<String>> geneSymbol2ListofRNANucleotideAccessionMap = null;
		Map<String,List<Integer>> RNANucleotideAccession2ListofGeneIdMap = null;
		
		 if(userDefinedGeneSetInputType.isGeneSymbol()){
	    	geneSymbol2ListofRNANucleotideAccessionMap = new HashMap<String,List<String>>();	    	
	    	RNANucleotideAccession2ListofGeneIdMap = new HashMap<String,List<Integer>>();
	    	
	    	HumanGenesAugmentation.fillGeneSymbol2ListofRNANucleotideAccessionMap(dataFolder,geneSymbol2ListofRNANucleotideAccessionMap);
	    	HumanGenesAugmentation.fillRNANucleotideAccession2ListofGeneIdMap(dataFolder,RNANucleotideAccession2ListofGeneIdMap);
	    	
	    }else if (userDefinedGeneSetInputType.isRNANucleotideAccession()){
	    	RNANucleotideAccession2ListofGeneIdMap = new HashMap<String,List<Integer>>();	    	
	      	
	    	HumanGenesAugmentation.fillRNANucleotideAccession2ListofGeneIdMap(dataFolder,RNANucleotideAccession2ListofGeneIdMap);   
	    }
	
		
		//Read the user defined geneset inputFile
		String strLine;
		int indexofFirstTab;
		String GO_ID;
		String geneInformation;
		
		short userDefinedGeneSetNumber = 0;
		TShortArrayList existingUserDefinedGeneSetNumberList = null;

	
		try {
			FileReader fileReader = FileOperations.createFileReader(userDefinedGeneSetInputFile);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			
			while((strLine = bufferedReader.readLine())!=null){
				
				indexofFirstTab = strLine.indexOf('\t');
				GO_ID = strLine.substring(0,indexofFirstTab);
				//geneInformation can be geneID, geneSymbol or RNANucleotideAccession
				geneInformation = strLine.substring(indexofFirstTab+1);
				
				//Fill name2number map
				//Fill number2name map
				if (!(userDefinedGeneSetName2UserDefinedGeneSetNumberMap.containsKey(GO_ID))){
					userDefinedGeneSetName2UserDefinedGeneSetNumberMap.put(GO_ID, userDefinedGeneSetNumber);
					userDefinedGeneSetNumber2UserDefinedGeneSetNameMap.put(userDefinedGeneSetNumber, GO_ID);
				}//End of IF
				
				
				
				if (userDefinedGeneSetInputType.isGeneSymbol()){
					
					//Convert geneSymbol to geneID
					List<String> RNANucleotideAccessionList = geneSymbol2ListofRNANucleotideAccessionMap.get(geneInformation);
					for(String RNANucleotideAccession:RNANucleotideAccessionList ){
						List<Integer> geneIDList = RNANucleotideAccession2ListofGeneIdMap.get(RNANucleotideAccession);
						for(int geneID: geneIDList){
							
							
							updateMap(geneID,geneId2ListofUserDefinedGeneSetNumberMap,userDefinedGeneSetNumber);
							
						}//End of For: each geneID in the geneIDList
					}//End of For:  each RNANucleotideAccession in the RNANucleotideAccessionList
					
				}else if (userDefinedGeneSetInputType.isRNANucleotideAccession()){
					//Convert RNANucleotideAccession to geneID
					List<Integer> geneIDList = RNANucleotideAccession2ListofGeneIdMap.get(geneInformation);
					for(Integer geneID: geneIDList){
						updateMap(geneID,geneId2ListofUserDefinedGeneSetNumberMap,userDefinedGeneSetNumber);
						
					}//End of For: each geneID in the geneIDList
					
				}else if (userDefinedGeneSetInputType.isGeneID()){
					//No conversion is needed
					int geneID = Integer.parseInt(geneInformation);
					updateMap(geneID,geneId2ListofUserDefinedGeneSetNumberMap,userDefinedGeneSetNumber);
					
				}
				
				
				//Increment numberofUserDefinedGeneSet
				userDefinedGeneSetNumber++;
				
				
			}//End of While
			
			
			GlanetRunner.appendLog("Number of user defined genesets: " + numberofUserDefinedGeneSet);
			bufferedReader.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
//		String strLine;
//		FileReader fileReader = null;
//		BufferedReader bufferedReader = null;
//		
//		int indexofFirstTab 	= -1;
//		int indexofSecondTab 	= -1;
//		int indexofFirstColon 		= -1;
//		int indexofSecondColon 		= -1;
//		
//		String keggPathwayName;
//		String ncbiGeneIdName;
//		
//		short userDefinedGeneSetNumber;
//		int ncbiGeneId;
//		
//		TShortArrayList existingUserDefinedGeneSetNumberList = null;
//		
//		try {
//			fileReader = new FileReader(userDefinedGeneSetInputFile);
//			bufferedReader = new BufferedReader(fileReader);
//			
//			while((strLine = bufferedReader.readLine())!=null){
//				
//				//example line
//				//path:hsa00010	hsa:10327	reverse
//
//				indexofFirstTab = strLine.indexOf('\t');
//				indexofSecondTab = strLine.indexOf('\t',indexofFirstTab+1);
//				
//				keggPathwayName = strLine.substring(0,indexofFirstTab);
//				ncbiGeneIdName = strLine.substring(indexofFirstTab+1,indexofSecondTab);
//				
//				indexofFirstColon = keggPathwayName.indexOf(':');
//				indexofSecondColon = ncbiGeneIdName.indexOf(':');
//				
//				keggPathwayName = keggPathwayName.substring(indexofFirstColon+1);				
//				ncbiGeneId = Integer.parseInt(ncbiGeneIdName.substring(indexofSecondColon+1));
//				
//				//What if it is null? check this situation
//				userDefinedGeneSetNumber = userDefinedGeneSetName2UserDefinedGeneSetNumberMap.get(keggPathwayName);
//				
//				//fill ncbiGeneId2KeggPathwayHashMap
//				//Hash Map does not contain this ncbiGeneId
//				if (!geneId2ListofUserDefinedGeneSetNumberMap.containsKey(ncbiGeneId)){					
//					TShortArrayList keggPathwayNumberList = new TShortArrayList();
//					keggPathwayNumberList.add(userDefinedGeneSetNumber);
//					geneId2ListofUserDefinedGeneSetNumberMap.put(ncbiGeneId, keggPathwayNumberList);
//					}
//				//Hash Map contains this ncbiGeneId
//				else{
//					existingUserDefinedGeneSetNumberList = geneId2ListofUserDefinedGeneSetNumberMap.get(ncbiGeneId);
//					
//					if(!(existingUserDefinedGeneSetNumberList.contains(userDefinedGeneSetNumber))){
//						existingUserDefinedGeneSetNumberList.add(userDefinedGeneSetNumber);
//					} else{
//						GlanetRunner.appendLog("More than one same kegg pathway for the same ncbi gene id");
//					}
//					
//					geneId2ListofUserDefinedGeneSetNumberMap.put(ncbiGeneId, existingUserDefinedGeneSetNumberList);
//		
//				}
//			} // End of While
//			
//			bufferedReader.close();
//			fileReader.close();
//			
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
						
		
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
